#!/bin/bash
# A script to list version numbers of critical development tools
# If you have tools installed in other directories, adjust PATH here AND
# in ~lfs/.bashrc (section 4.4) as well.
LC_ALL=C
PATH=/usr/bin:/bin:/usr/local/bin # Added /usr/local/bin for common installations

bail() {
    echo "FATAL: $1"
    exit 1
}

# Corrected: Removed extra newline after 'sort'
grep --version > /dev/null 2>&1 || bail "grep does not work"
sed '' /dev/null > /dev/null 2>&1 || bail "sed does not work" # Redirected sed output
sort --version > /dev/null 2>&1 || bail "sort does not work" # Added --version to sort check

ver_check() {
    if ! type -p "$2" &>/dev/null; then # Added quotes around $2 for safety
        echo "ERROR: Cannot find $2 ($1)"; return 1;
    fi
    v=$("$2" --version 2>&1 | grep -E -o '[0-9]+\.[0-9\.]+[a-z]*' | head -n1)
    if printf '%s\n' "$3" "$v" | sort --version-sort --check &>/dev/null; then # Added quotes around $3 and $v
        printf "OK: %-9s %-6s >= %s\n" "$1" "$v" "$3"; return 0; # Added quotes around %s
    else
        printf "ERROR: %-9s is TOO OLD (%s or later required)\n" "$1" "$3"; # Added quotes around %s
        return 1;
    fi
}

ver_kernel() {
    kver=$(uname -r | grep -E -o '^[0-9\.]+')
    if printf '%s\n' "$1" "$kver" | sort --version-sort --check &>/dev/null; then # Added quotes
        printf "OK: Linux Kernel %s >= %s\n" "$kver" "$1"; return 0; # Added quotes
    else
        printf "ERROR: Linux Kernel (%s) is TOO OLD (%s or later required)\n" "$kver" "$1"; # Added quotes
        return 1;
    fi
}

# Coreutils first because --version-sort needs Coreutils >= 7.0
# Corrected: Added 'sort' as the command to check for Coreutils
ver_check Coreutils sort 8.1 || bail "Coreutils too old, stop"

ver_check Bash bash 3.2
ver_check Binutils ld 2.13.1
ver_check Bison bison 2.7
ver_check Diffutils diff 2.8.1
ver_check Findutils find 4.2.31
ver_check Gawk gawk 4.0.1
ver_check GCC gcc 5.2
ver_check "GCC (C++)" g++ 5.2
ver_check Grep grep 2.5.1a
ver_check Gzip gzip 1.3.12
ver_check M4 m4 1.4.10
ver_check Make make 4.0
ver_check Patch patch 2.5.4
ver_check Perl perl 5.8.8
ver_check Python python3 3.4
ver_check Sed sed 4.1.5
ver_check Tar tar 1.22
ver_check Texinfo texi2any 5.0
ver_check Xz xz 5.0.0

ver_kernel 5.4

if mount | grep -q 'devpts on /dev/pts' && [ -e /dev/ptmx ]; then
    echo "OK: Linux Kernel supports UNIX 98 PTY";
else
    echo "ERROR: Linux Kernel does NOT support UNIX 98 PTY";
fi

alias_check() {
    if "$1" --version 2>&1 | grep -qi "$2"; then # Added quotes around $1 and $2
        printf "OK: %-4s is %s\n" "$1" "$2"; # Added quotes
    else
        printf "ERROR: %-4s is NOT %s\n" "$1" "$2"; # Added quotes
    fi
}

echo "Aliases:"
alias_check awk GNU
alias_check yacc Bison
alias_check sh Bash

echo "Compiler check:"
if printf "int main(){}" | g++ -x c++ - -o /dev/null; then # Added -o /dev/null to prevent a.out creation
    echo "OK: g++ works";
else
    echo "ERROR: g++ does NOT work";
fi
# rm -f a.out # No longer needed if -o /dev/null is used

if [ -z "$(nproc 2>/dev/null)" ]; then # Using -z to check if output is empty, redirecting stderr
    echo "ERROR: nproc is not available or it produces empty output"
else
    echo "OK: nproc reports $(nproc) logical cores are available"
fi

